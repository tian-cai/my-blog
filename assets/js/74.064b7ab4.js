(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{452:function(e,a,r){"use strict";r.r(a);var t=r(25),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"瓶颈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#瓶颈"}},[e._v("#")]),e._v(" 瓶颈")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("构建过程耗时太多")])]),e._v(" "),r("li",[r("p",[e._v("构建出的包体积太大")])])]),e._v(" "),r("h3",{attrs:{id:"可视化分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可视化分析"}},[e._v("#")]),e._v(" 可视化分析")]),e._v(" "),r("p",[e._v("输出webpack构建信息的json文件"),r("code",[e._v("webpack --profile --json > stats.json")])]),e._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"https://github.com/webpack/analyse",target:"_blank",rel:"noopener noreferrer"}},[e._v("analyse"),r("OutboundLink")],1),e._v(": 官方分析工具，上传json文件即可")])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://github.com/alexkuz/webpack-chart",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-chart"),r("OutboundLink")],1),e._v(": webpack 数据交互饼图。")])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://github.com/chrisbateman/webpack-visualizer",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-visualizer"),r("OutboundLink")],1),e._v(": 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。")])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-bundle-analyzer"),r("OutboundLink")],1),e._v(": 一款分析 bundle 内容的插件及 CLI 工具，以便捷的、交互式、可缩放的树状图形式展现给用户。")])])]),e._v(" "),r("h3",{attrs:{id:"构建速度分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建速度分析"}},[e._v("#")]),e._v(" 构建速度分析")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/stephencookdev/speed-measure-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("speed-measure-webpack-plugin"),r("OutboundLink")],1),e._v("插件可以分析webpack的插件和loader耗时情况，有助于我们定位构建慢的问题以及如何优化构建速度。")]),e._v(" "),r("h3",{attrs:{id:"缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[e._v("#")]),e._v(" 缓存")]),e._v(" "),r("p",[e._v("对支持缓存的loader开启缓存，对不支持缓存的loader使用"),r("a",{attrs:{href:"https://www.npmjs.com/package/cache-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("cache-loader"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("strong",[e._v("保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用cache-loader。")])]),e._v(" "),r("h3",{attrs:{id:"多核"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多核"}},[e._v("#")]),e._v(" 多核")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("使用"),r("a",{attrs:{href:"https://github.com/amireh/happypack",target:"_blank",rel:"noopener noreferrer"}},[e._v("happypack"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("使用"),r("a",{attrs:{href:"https://www.webpackjs.com/loaders/thread-loader/",target:"_blank",rel:"noopener noreferrer"}},[e._v("thread-loader"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("多进程压缩(三选一即可)")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/gdborton/webpack-parallel-uglify-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-parallel-uglify-plugin"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("uglifyjs-webpack-plugin"),r("OutboundLink")],1),e._v(" 开启 parallel 参数")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("terser-webpack-plugin"),r("OutboundLink")],1),e._v(" 开启 parallel 参数(推荐)")])])])]),e._v(" "),r("h3",{attrs:{id:"限定范围"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#限定范围"}},[e._v("#")]),e._v(" 限定范围")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("在配置 Loader 时通过 include 去缩小命中范围")])]),e._v(" "),r("li",[r("p",[e._v("优化 resolve.modules 配置, 可以指明存放第三方模块的绝对路径，以减少寻找")])]),e._v(" "),r("li",[r("p",[e._v("优化 resolve.alias 配置, 例如通过配置 resolve.alias 可以让 Webpack 在处理 React 库时，直接使用单独完整的 react.min.js 文件，从而跳过耗时的递归解析操作。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  module.exports = {\n      resolve: {\n          // 使用 alias 把导入 react 的语句换成直接使用单独完整的 react.min.js 文件，\n          // 减少耗时的递归解析操作\n          alias: {\n          'react': path.resolve(__dirname, './node_modules/react/dist/react.min.js'),\n          }\n      },\n  }\n")])])])]),e._v(" "),r("li",[r("p",[e._v("优化 module.noParse 配置\n可以让 Webpack 忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能。 原因是一些库，例如 jQuery 、ChartJS， 它们庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  module.exports = {\n      module: {\n          // 独完整的 `react.min.js` 文件就没有采用模块化，忽略对 `react.min.js` 文件的递归解析处理\n          noParse: [/react\\.min\\.js$/],\n      }\n  };\n")])])])])]),e._v(" "),r("h3",{attrs:{id:"图片压缩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图片压缩"}},[e._v("#")]),e._v(" 图片压缩")]),e._v(" "),r("p",[e._v("使用"),r("a",{attrs:{href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("image-webpack-loader"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"tree-shaking"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" tree shaking")]),e._v(" "),r("p",[e._v("生效的前提")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("模块是 ES6 的语法")])]),e._v(" "),r("li",[r("p",[e._v("模块代码是没有副作用的")])]),e._v(" "),r("li",[r("p",[e._v("在 .babelrc 里设置 modules: false 即可")])]),e._v(" "),r("li",[r("p",[e._v("引入一个能够删除未引用代码的压缩工具(例如 UglifyJSPlugin）")])])]),e._v(" "),r("h3",{attrs:{id:"code-splitting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code-splitting"}},[e._v("#")]),e._v(" code splitting")]),e._v(" "),r("p",[e._v("代码分离能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。")]),e._v(" "),r("p",[e._v("代码分离可以用于获取更小的 bundle，以及控制资源加载优先级。")]),e._v(" "),r("p",[e._v("有三种常用的代码分离方法：")]),e._v(" "),r("ul",[r("li",[e._v("入口起点：使用 entry 配置手动地分离代码。")]),e._v(" "),r("li",[e._v("防止重复：使用 CommonsChunkPlugin 去重和分离 chunk。")]),e._v(" "),r("li",[e._v("动态导入：通过模块的内联函数调用来分离代码。")])]),e._v(" "),r("h3",{attrs:{id:"抽离"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽离"}},[e._v("#")]),e._v(" 抽离")]),e._v(" "),r("p",[e._v("对于一些不常变更的静态依赖，比如我们项目中常见的 React 全家桶，亦或是用到的一些工具库等等，我们不希望这些依赖被集成进每一次构建逻辑中，因为它们真的太少时候会被变更了，所以每次的构建的输入输出都应该是相同的。因此，我们会设法将这些静态依赖从每一次的构建逻辑中抽离出去，以提升我们每次构建的构建效率。常见的方案有两种，一种是使用 webpack-dll-plugin 的方式，在首次构建时候就将这些静态依赖单独打包，后续只需要引用这个早就被打好的静态依赖包即可；另一种，也是业内常见的 Externals的方式，我们将这些不需要打包的静态资源从构建逻辑中剔除出去，而使用 CDN 的方式，去引用它们。")]),e._v(" "),r("h4",{attrs:{id:"dll"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dll"}},[e._v("#")]),e._v(" Dll")]),e._v(" "),r("ul",[r("li",[e._v("DllPlugin插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。")]),e._v(" "),r("li",[e._v("DllReferencePlugin把只有 dll 的 bundle 引用到需要的预编译的依赖。")])]),e._v(" "),r("p",[e._v("以下是代码示例，详情见"),r("a",{attrs:{href:"https://github.com/tian-cai/demo/tree/master/src/webpack/demo2",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// webpack.config.dll.js\nconst webpack = require("webpack");\n\nconst dll = {\n  entry: {\n    react: ["react", "react-dom", "react-router-dom"]\n  },\n  output: {\n    path: __dirname + "/dll",\n    filename: "[name]-[hash:8].dll.js",\n    library: "[name]_dll"\n  },\n  plugins: [\n    new cleanWebpackPlugin("dll/*"),\n    new webpack.DllPlugin({\n        name: "[name]_dll",\n        path: __dirname + "/dll/" + "[name].manifest.json",\n    })\n  ],\n  mode: "production",\n};\nmodule.exports = dll;\n\n// webpack.config.prod.js\nconst webpack = require("webpack");\nconst cleanWebpackPlugin = require("clean-webpack-plugin");\nconst HtmlWebpackTagsPlugin = require(\'html-webpack-tags-plugin\');\nconst fs = require(\'fs\')\nconst path = require(\'path\')\n\nfunction loadDllAssets() {\n  return fs\n    .readdirSync(path.resolve(__dirname, \'./dll\'))\n    .filter(filename => filename.match(/.dll.js$/))\n    .map(filename => `../dll/${filename}`);\n}\n\nmodule.exports = {\n    mode: "production",\n    output: {\n        path: __dirname + "/build",\n        filename: "[name]-[contenthash].js"\n    },\n    plugins: [\n        new cleanWebpackPlugin("build/*"),\n        new webpack.DllReferencePlugin({\n            manifest: require("./dll/react.manifest.json")\n        }),\n        new HtmlWebpackTagsPlugin({\n            append: false,\n            scripts: loadDllAssets()\n        })\n    ]\n}\n')])])]),r("h4",{attrs:{id:"externals"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#externals"}},[e._v("#")]),e._v(" Externals")]),e._v(" "),r("p",[e._v("风险： 会出现CDN服务不稳定而导致了项目出现问题的情况，使用需要谨慎。")]),e._v(" "),r("p",[e._v("优点： 将不经常变更的依赖从构建逻辑中分离出去，提升构建效率。")]),e._v(" "),r("p",[e._v("以下是代码示例，详情见"),r("a",{attrs:{href:"https://github.com/tian-cai/demo/tree/master/src/webpack/demo1",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('module.exports = {\n  ...,\n  externals: {\n    // key是我们 import 的包名，value 是CDN为我们提供的全局变量名\n    // 所以最后 webpack 会把一个静态资源编译成：module.export.react = window.React\n    "react": "React",\n    "react-dom": "ReactDOM",\n    "redux": "Redux",\n    "react-router-dom": "ReactRouterDOM"\n  }\n}\n')])])]),r("h3",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.npmjs.com/package/cache-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("cache-loader"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/amireh/happypack",target:"_blank",rel:"noopener noreferrer"}},[e._v("happypack"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903924806189070",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack优化——将你的构建效率提速翻倍"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000018493260",target:"_blank",rel:"noopener noreferrer"}},[e._v("性能优化篇---Webpack构建速度优化"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://huangxsu.com/2018/08/12/webpack-optimization/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack构建速度与结果优化"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903669100445710",target:"_blank",rel:"noopener noreferrer"}},[e._v("体积减少80%！释放webpack tree-shaking的真正潜力"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903544756109319",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tree-Shaking性能优化实践 - 原理篇"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/6844903544760336398",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tree-Shaking性能优化实践 - 实践篇"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://imweb.io/topic/5a40551ea192c3b460fce335",target:"_blank",rel:"noopener noreferrer"}},[e._v("加速Webpack-缩小文件搜索范围"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://jkfhto.github.io/2019-10-17/webpack/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B9%B6%E8%A1%8C%E5%8E%8B%E7%BC%A9%E4%BB%A3%E7%A0%81/",target:"_blank",rel:"noopener noreferrer"}},[e._v("多进程并行压缩代码"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://jkfhto.github.io/2019-10-17/webpack/%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%88%86%E5%8C%85%EF%BC%9A%E9%A2%84%E7%BC%96%E8%AF%91%E8%B5%84%E6%BA%90%E6%A8%A1%E5%9D%97-%E4%BD%BF%E7%94%A8-DLLPlugin-%E8%BF%9B%E8%A1%8C%E5%88%86%E5%8C%85/",target:"_blank",rel:"noopener noreferrer"}},[e._v("进一步分包：预编译资源模块 使用 DLLPlugin 进行分包"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000013000463",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack优化之code splitting"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26710831",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack 大法之 Code Splitting"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.webpackjs.com/configuration/externals/",target:"_blank",rel:"noopener noreferrer"}},[e._v("externals"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.webpackjs.com/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[e._v("code-splitting"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);